# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/losses.ipynb (unless otherwise specified).

__all__ = ['FocalLoss', 'ArcFaceLoss']

# Cell
import torch.nn as nn
import torch
import math

# Cell
class FocalLoss(nn.Module):
    def __init__(self, gamma=0.25, eps=1e-7):
        super().__init__()

        self.gamma = gamma
        self.eps = eps
        self.cross_entropy = nn.CrossEntropyLoss(reduction="none")

    def forward(self, input, target):
        ce_loss = self.cross_entropy(input, target)
        p = torch.exp(-ce_loss)
        loss = (1 - p) ** self.gamma * ce_loss
        return loss.mean()


# Cell
class ArcFaceLoss(nn.Module):
    def __init__(self, s=45.0, m=0.2, crit="focal", weight=None, reduction="mean", class_weights_norm=None):
        super().__init__()

        self.weight = weight
        self.reduction = reduction
        self.class_weights_norm = class_weights_norm

        if crit == "focal":
            self.crit = FocalLoss()
        elif crit == "crossentropy":
            self.crit = nn.CrossEntropyLoss(reduction="none")

        if s is None:
            self.s = torch.nn.Parameter(torch.tensor([45.], requires_grad=True, device='cuda'))
        else:
            self.s = s


        self.cos_m = math.cos(m)
        self.sin_m = math.sin(m)
        self.th = math.cos(math.pi - m)
        self.mm = math.sin(math.pi - m) * m

    def forward(self, logits, labels):

        logits = logits.float()
        cosine = logits
        sine = torch.sqrt(1.0 - torch.pow(cosine, 2))
        phi = cosine * self.cos_m - sine * self.sin_m
        phi = torch.where(cosine > self.th, phi, cosine - self.mm)

        labels2 = torch.zeros_like(cosine)
        labels2.scatter_(1, labels.view(-1, 1).long(), 1)
        output = (labels2 * phi) + ((1.0 - labels2) * cosine)

        s = self.s

        output = output * s
        loss = self.crit(output, labels)

        if self.weight is not None:
            w = self.weight[labels].to(logits.device)

            loss = loss * w
            if self.class_weights_norm == "batch":
                loss = loss.sum() / w.sum()
            if self.class_weights_norm == "global":
                loss = loss.mean()
            else:
                loss = loss.mean()

            return loss

        if self.reduction == "mean":
            loss = loss.mean()
        elif self.reduction == "sum":
            loss = loss.sum()

        return loss