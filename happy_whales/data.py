# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/data.ipynb (unless otherwise specified).

__all__ = ['fix_species', 'get_folds', 'HappyWhalesDataset']

# Cell
from sklearn.model_selection import KFold, StratifiedKFold
from torch.utils.data import Dataset

import pandas as pd
import numpy as np
import torch
import cv2
import os

# Cell
def fix_species(species_col):
    return species_col.replace({"globis": "short_finned_pilot_whale",
                                "pilot_whale": "short_finned_pilot_whale",
                                "kiler_whale": "killer_whale",
                                "bottlenose_dolpin": "bottlenose_dolphin"})

# Cell
def get_folds(df, stratify=None, n_splits=5):
    if stratify is None:
        kf = KFold(n_splits=n_splits, shuffle=True)
        folds = kf.split(df)
    else:
        kf = StratifiedKFold(n_splits=n_splits, shuffle=True)
        folds = kf.split(df, df[stratify])

    df["fold"] = -1

    for i, (_, valid_idx) in enumerate(folds):
        df.loc[valid_idx, "fold"] = i

    return df

# Cell
class HappyWhalesDataset(Dataset):
    def __init__(self, df, bbox_dict=None, transforms=None, normalization='imagenet', mode="train_val"):
        super().__init__()

        assert mode in ("train_val", "inference"), "Wrong dataset mode."

        self.df = df
        self.mode = mode
        self.normalization = normalization
        self.num_examples = len(df.index)
        self.bbox_dict = bbox_dict
        self.transforms = transforms

    def _normalize_image(self, image):

        if self.normalization == "imagenet":
            means = np.array([0.485, 0.456, 0.406], dtype=np.float32)
            stds = np.array([0.229, 0.224, 0.225], dtype=np.float32)

        image = (image / 255.)

        image[0] = (image[0] - means[0]) / stds[0]
        image[1] = (image[1] - means[1]) / stds[1]
        image[2] = (image[2] - means[2]) / stds[2]

        return image

    def __len__(self):
        return self.num_examples

    def __getitem__(self, index):

        image_path = self.df.iloc[index, 0]
        image_name = os.path.split(image_path)[-1]

        image = cv2.imread(image_path)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        if self.bbox_dict:
            bbox = self.bbox_dict[image_name]
            xmin, ymin, xmax, ymax = bbox
            image = image[ymin: ymax, xmin: xmax]

        if self.transforms:
            image = self.transforms(image=image)

        if self.normalization:
            image = self._normalize_image(image)

        if self.mode == "train_val":
            label = self.df.iloc[index, 2]
            species = self.df.iloc[index, 1]

        return {
            "image_name": image_name,
            "image": torch.tensor(image, dtype=torch.float).permute(2, 0, 1),
            "species": torch.tensor(species, dtype=torch.long),
            "label": torch.tensor(label, dtype=torch.long)
        } if self.mode == "train_val" else {
            "image_name": image_name,
            "image": torch.tensor(image, dtype=torch.float).permute(2, 0, 1),
            "label": torch.tensor(-1, dtype=torch.long)
        }