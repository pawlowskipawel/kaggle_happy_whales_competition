# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/models.ipynb (unless otherwise specified).

__all__ = ['GeM', 'ArcMarginProduct', 'Backbone', 'HappyWhalesModel']

# Cell
import torch.nn.functional as F
import torch.nn as nn
import torch
import timm

# Cell
class GeM(nn.Module):
    def __init__(self, p=3, eps=1e-6):
        super().__init__()
        self.p = nn.Parameter(torch.ones(1)*p)
        self.eps = eps

    def forward(self, x):
        return self.gem(x, p=self.p, eps=self.eps)

    def gem(self, x, p=3, eps=1e-6):
        return F.avg_pool2d(x.clamp(min=eps).pow(p), (x.size(-2), x.size(-1))).pow(1./p)

# Cell
class ArcMarginProduct(nn.Module):
    def __init__(self, in_features, out_features):
        super().__init__()
        self.weight = nn.Parameter(torch.Tensor(out_features, in_features))
        nn.init.xavier_uniform_(self.weight)

    def forward(self, features):
        cosine = F.linear(F.normalize(features), F.normalize(self.weight))
        return cosine

# Cell
class Backbone(nn.Module):
    def __init__(self, name="efficientnet_b0", pretrained=True):
        super().__init__()

        self.net = timm.create_model(name, pretrained=pretrained)
        self.embedding_dim = self.net.get_classifier().in_features

    def forward(self, x):
        return self.net.forward_features(x)

# Cell
class HappyWhalesModel(nn.Module):
    def __init__(self, model_name, output_embedding_dim, num_classes, dropout=.3, freeze_backbone_batchnorm=False, add_species_head=False):
        super().__init__()

        self.model_name = model_name
        self.add_species_head = add_species_head
        self.output_embedding_dim = output_embedding_dim

        self.backbone = Backbone(self.model_name, pretrained=True)

        if freeze_backbone_batchnorm:
            for name, child in (self.backbone.named_children()):
                if name.find('BatchNorm') != -1:
                    for param in child.parameters():
                        param.requires_grad = True

        self.global_pool = GeM()

        self.neck = nn.Sequential(
            nn.BatchNorm1d(self.backbone.embedding_dim),
            nn.Dropout(dropout),
            nn.Linear(self.backbone.embedding_dim, self.output_embedding_dim, bias=True),
        )

        self.head = ArcMarginProduct(self.output_embedding_dim, num_classes)

        self.neck.apply(self._init_weights)
        self.head.apply(self._init_weights)

        if self.add_species_head:
            self.head_species = ArcMarginProduct(self.output_embedding_dim, 26)
            self.head_species.apply(self._init_weights)

    @classmethod
    def from_checkpoint(cls, pretrained_model_name, checkpoint_path, output_embedding_dim, num_classes):
        state_dict = torch.load(checkpoint_path, map_location='cpu')
        model = cls(pretrained_model_name, output_embedding_dim, num_classes)
        model.load_state_dict(state_dict)
        return model

    def _init_weights(self, module):
        if isinstance(module, nn.Linear):
            torch.nn.init.normal_(module.weight, 0.0, 0.01)
            if module.bias is not None:
                torch.nn.init.zeros_(module.bias)

        elif isinstance(module, nn.LayerNorm) or isinstance(module, nn.BatchNorm1d):
            torch.nn.init.normal_(module.weight, 1.0, 0.01)
            torch.nn.init.zeros_(module.bias)

    def forward(self, x, return_embeddings=False):

        x = self.backbone(x)
        x = self.global_pool(x)

        x = x[:,:,0,0]

        embeddings = self.neck(x)

        logits = self.head(embeddings)

        output = {}
        output['logits'] = logits

        if return_embeddings:
            output['embeddings'] = embeddings

        if self.add_species_head:
            species_logits = self.head_species(embeddings)
            output['species_logits'] = species_logits

        return output

