# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/models.ipynb (unless otherwise specified).

__all__ = ['GeM', 'ArcMarginProduct', 'Backbone', 'HappyWhalesModel']

# Cell
import torch.nn.functional as F
import torch.nn as nn
import torch
import timm

# Cell
class GeM(nn.Module):
    def __init__(self, p=3, eps=1e-6):
        super().__init__()
        self.p = nn.Parameter(torch.ones(1)*p)
        self.eps = eps

    def forward(self, x):
        return self.gem(x, p=self.p, eps=self.eps)

    def gem(self, x, p=3, eps=1e-6):
        return F.avg_pool2d(x.clamp(min=eps).pow(p), (x.size(-2), x.size(-1))).pow(1./p)

    def __repr__(self):
        return self.__class__.__name__ + '(' + 'p=' + '{:.4f}'.format(self.p.data.tolist()[0]) + ', ' + 'eps=' + str(self.eps) + ')'



# Cell
class ArcMarginProduct(nn.Module):
    def __init__(self, in_features, out_features):
        super().__init__()
        self.weight = nn.Parameter(torch.Tensor(out_features, in_features))
        nn.init.xavier_uniform_(self.weight)

    def forward(self, features):
        cosine = F.linear(F.normalize(features), F.normalize(self.weight))
        return cosine

# Cell
class Backbone(nn.Module):
    def __init__(self, name="efficientnet_b0", pretrained=True):
        super().__init__()

        self.net = timm.create_model(name, pretrained=pretrained)

        if "efficientnet" in name:
            self.embedding_dim = self.net.classifier.in_features
        elif "convnext" in name:
            self.embedding_dim = self.net.classifier.in_features
        else:
            raise AttributeError("Wrong backbone name!")

    def forward(self, x):
        return self.net.forward_features(x)

# Cell
class HappyWhalesModel(nn.Module):
    def __init__(self, model_name, output_embedding_dim, num_classes):
        super().__init__()

        self.model_name = model_name
        self.output_embedding_dim = output_embedding_dim

        self.backbone = Backbone(self.model_name, pretrained=True)

        #self.pre_neck = nn.Sequential(
        #    nn.BatchNorm2d(self.backbone.embedding_dim),
        #    nn.PReLU(),
        #    nn.Dropout(.2)
        #)

        #self.pre_neck.apply(self._init_weights)

        self.global_pool = GeM()

        self.neck = nn.Sequential(
            nn.BatchNorm1d(1280),
            nn.Linear(self.backbone.embedding_dim, self.output_embedding_dim),
            nn.Dropout(.5)
        )
        self.neck.apply(self._init_weights)

        self.head = ArcMarginProduct(self.output_embedding_dim, num_classes)

    def _init_weights(self, module):
        module_name = module.__class__.__name__

        if module_name.find('Conv') != -1 or module_name.find('Linear') != -1:

            torch.nn.init.normal_(module.weight, 0.0, 0.01)
            if module.bias is not None:
                torch.nn.init.zeros_(module.bias)

        elif module_name.find('BatchNorm') != -1:
            torch.nn.init.normal_(module.weight, 1.0, 0.01)
            torch.nn.init.zeros_(module.bias)

    def forward(self, x, return_embeddings=False):

        x = self.backbone(x)

        x = self.global_pool(x)
        x = x.flatten(1)

        x = self.neck(x)
        logits = self.head(x)

        if return_embeddings:
            return {'logits': logits, 'embeddings': x}
        else:
            return {'logits': logits}
